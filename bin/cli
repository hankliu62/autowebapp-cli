#!/usr/bin/env node

const program = require('commander');
const path = require('path');

const logger = require('../utils/logger');
const directory = require('../utils/directory');
const platform = require('../utils/platform');
const message = require('../utils/message');
const cmd = require('../utils/cmd');

const version = require('../package').version;
const _exit = process.exit;

program
  .version(version, '-v, --version')
  .usage('[options] [dir]')
  .option('-t, --type <engine>', 'add template <engine> support (react|vue) (defaults to plain react)')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

/**
 * Graceful exit for async STDIO
 */
function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream) {
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit;

if (!exit.exited) {
  main();
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} appName
 * @param {String} appPath
 */
function createApplication(appName, appPath) {
  logger.log();

  // package.json
  const type = program.type || 'react';
  const pkg = JSON.parse(directory.loadTemplate(directory.merge(type, 'package.json')));
  pkg.name = appName;

  directory.mkdir(appPath);
  // copy static directory
  directory.cp(path.join(__dirname, '..', 'templates', 'static'), directory.merge(appPath, 'static'));
  // copy common configuration files
  directory.cp(path.join(__dirname, '..', 'templates', 'common', 'configs'), appPath);
  // copy special configuration files
  directory.cp(path.join(__dirname, '..', 'templates', type, 'configs'), appPath);
  // copy webpack configuration files
  directory.cp(path.join(__dirname, '..', 'templates', type, 'build'), appPath);

  // copy package.json
  directory.write(directory.merge(appPath, 'package.json'), JSON.stringify(pkg, null, 2));

  // copy web app template files from `src`
  directory.mkdir(directory.merge(appPath, 'src'));
  directory.cp(path.join(__dirname, '..', 'templates', type, 'src'), directory.merge(appPath, 'src'));
  // copy template html
  directory.copyTemplate('template.html', directory.merge(appPath, 'src', 'template.html'));

  const prompt = platform.isWindows() ? '>' : '$';

  logger.log();
  logger.log('   install dependencies:');
  logger.log('     %s cd %s && npm install', prompt, appPath);
  // install dependencies
  cmd.install(directory.joinBasePwd(appPath)).then(function() {
    logger.success(` install ${appName} project dependencies successfully`);
    logger.log();
    logger.success('     %s cd %s && npm start', prompt, appPath);
    logger.success(' >>>>>>     Good Luck!!!     <<<<<<');
  }, function(code) {
    logger.fatal(` ps process exited with code ${code}`);
  });

  // directory.mkdir(path, function(){
  //   directory.mkdir(path + '/public');
  //   directory.mkdir(path + '/public/javascripts');
  //   directory.mkdir(path + '/public/images');
  //   directory.mkdir(path + '/public/stylesheets', function(){
  //     switch (program.css) {
  //       case 'less':
  //         directory.write(path + '/public/stylesheets/style.less', less);
  //         break;
  //       case 'stylus':
  //         directory.write(path + '/public/stylesheets/style.styl', stylus);
  //         break;
  //       case 'compass':
  //         directory.write(path + '/public/stylesheets/style.scss', compass);
  //         break;
  //       case 'sass':
  //         directory.write(path + '/public/stylesheets/style.sass', sass);
  //         break;
  //       default:
  //         directory.write(path + '/public/stylesheets/style.css', css);
  //     }
  //     complete();
  //   });

  //   directory.mkdir(path + '/routes', function(){
  //     directory.write(path + '/routes/index.js', index);
  //     directory.write(path + '/routes/users.js', users);
  //     complete();
  //   });

  //   directory.mkdir(path + '/views', function(){
  //     switch (program.template) {
  //       case 'ejs':
  //         copy_template('ejs/index.ejs', path + '/views/index.ejs');
  //         copy_template('ejs/error.ejs', path + '/views/error.ejs');
  //         break;
  //       case 'nunjucks':
  //         copy_template('nunjucks/index.nunjucks', path + '/views/index.nunjucks');
  //         copy_template('nunjucks/layout.nunjucks', path + '/views/layout.nunjucks');
  //         copy_template('nunjucks/error.nunjucks', path + '/views/error.nunjucks');
  //         break;
  //       case 'jade':
  //       case 'pug':
  //         copy_template('jade/index.pug', path + '/views/index.pug');
  //         copy_template('jade/layout.pug', path + '/views/layout.pug');
  //         copy_template('jade/error.pug', path + '/views/error.pug');
  //         break;
  //       case 'hjs':
  //         copy_template('hogan/index.hjs', path + '/views/index.hjs');
  //         copy_template('hogan/error.hjs', path + '/views/error.hjs');
  //         break;
  //       case 'hbs':
  //         copy_template('hbs/index.hbs', path + '/views/index.hbs');
  //         copy_template('hbs/layout.hbs', path + '/views/layout.hbs');
  //         copy_template('hbs/error.hbs', path + '/views/error.hbs');
  //         break;
  //     }
  //     complete();
  //   });

  //   // CSS Engine support
  //   switch (program.css) {
  //     case 'less':
  //       app = app.replace('{css}', eol + 'app.use(require(\'less-middleware\')(path.join(__dirname, \'public\')));');
  //       break;
  //     case 'stylus':
  //       app = app.replace('{css}', eol + 'app.use(require(\'stylus\').middleware(path.join(__dirname, \'public\')));');
  //       break;
  //     case 'compass':
  //       app = app.replace('{css}', eol + 'app.use(require(\'node-compass\')({mode: \'expanded\'}));');
  //       break;
  //     case 'sass':
  //       app = app.replace('{css}', eol + 'app.use(require(\'node-sass-middleware\')({\n  src: path.join(__dirname, \'public\'),\n  dest: path.join(__dirname, \'public\'),\n  indentedSyntax: true,\n  sourceMap: true\n}));');
  //       break;
  //     default:
  //       app = app.replace('{css}', '');
  //   }

  //   // package.json
  //   var pkg = {
  //       name: app_name
  //     , version: '0.1.0'
  //     , private: true
  //     , "scripts": {
  //       "start": "node bin/www",
  //       "dev": "./node_modules/.bin/nodemon bin/www",
  //       "prd": "pm2 start bin/www",
  //       "test": "echo \"Error: no test specified\" && exit 1"
  //     }
  //     , "dependencies": {
  //       "debug": "^2.6.3",
  //       "koa": "^2.2.0",
  //       "koa-bodyparser": "^3.2.0",
  //       "koa-convert": "^1.2.0",
  //       "koa-json": "^2.0.2",
  //       "koa-logger": "^2.0.1",
  //       "koa-onerror": "^1.2.1",
  //       "koa-router": "^7.1.1",
  //       "koa-static": "^3.0.0",
  //       "koa-views": "^5.2.1"
  //     }
  //     , "devDependencies": {
  //       "nodemon": "^1.8.1"
  //     }
  //   }

  //   // Template support
  //   switch (program.template) {
  //     case 'jade':
  //     case 'pug':
  //       pkg.dependencies['pug'] = '^2.0.0-rc.1';
  //       break;
  //     case 'ejs':
  //       pkg.dependencies['ejs'] = '~2.3.3';
  //       break;
  //     case 'nunjucks':
  //       pkg.dependencies['nunjucks'] = '~3.0.0 ';
  //       break;
  //     case 'hjs':
  //       pkg.dependencies['hjs'] = '~0.0.6';
  //       break;
  //     case 'hbs':
  //       pkg.dependencies['handlebars'] = '~4.0.5';
  //       app = app.replace('\'{views}\'', '\'{views}\',\n  map: { hbs: \'handlebars\' }');
  //       break;
  //     default:
  //   }

  //   app = app.replace('{views}', program.template);

  //   // CSS Engine support
  //   switch (program.css) {
  //     case 'less':
  //       pkg.dependencies['less-middleware'] = '1.0.x';
  //       break;
  //     case 'compass':
  //       pkg.dependencies['node-compass'] = '0.2.3';
  //       break;
  //     case 'stylus':
  //       pkg.dependencies['stylus'] = '0.42.3';
  //       break;
  //     case 'sass':
  //       pkg.dependencies['node-sass-middleware'] = '0.8.0';
  //       break;
  //     default:
  //   }

  //   // sort dependencies like npm(1)
  //   pkg.dependencies = sortedObject(pkg.dependencies);

  //   // write files
  //   directory.write(path + '/package.json', JSON.stringify(pkg, null, 2));
  //   directory.write(path + '/app.js', app);
  //   directory.mkdir(path + '/bin', function(){
  //     www = www.replace('{name}', app_name);
  //     write(path + '/bin/www', www, 0755);

  //     complete();
  //   });

  //   if (program.git) {
  //     directory.write(path + '/.gitignore', fs.readFileSync(__dirname + '/../templates2/js/gitignore', 'utf-8'));
  //   }

  //   complete();
  // });
}

/**
 * Main program.
 */
function main() {
  // Path
  const destinationPath = program.args.shift() || '.';

  // App name
  const appName = path.basename(path.resolve(destinationPath));

  // Generate application
  directory.isEmpty(destinationPath).then(function(empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } else {
      message.confirm('destination is not empty, continue? [y/N] ').then(function(ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          logger.fatal('aborting');
        }
      });
    }
  }, function(error) {
    logger.fatal(error);
  });
}
